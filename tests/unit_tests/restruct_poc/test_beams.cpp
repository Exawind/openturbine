#include <initializer_list>

#include <gtest/gtest.h>

#include "src/restruct_poc/beams.hpp"
#include "tests/unit_tests/gen_alpha_poc/test_utilities.h"

namespace oturb::restruct_poc::tests {

std::vector<std::vector<double>> Array6x6ToVector(std::array<std::array<double, 6>, 6> A) {
    std::vector<std::vector<double>> B(6);
    for (int i = 0; i < 6; ++i) {
        B[i] = std::vector<double>(6);
        for (int j = 0; j < 6; ++j) {
            B[i][j] = A[i][j];
        }
    }
    return B;
}

TEST(BeamsTest, InitializeBeamsStruct) {
    // Stiffness matrix for uniform composite beam section
    std::array<std::array<double, 6>, 6> stiffness_matrix = {{
        {1., 2., 3., 4., 5., 6.},
        {2., 4., 6., 8., 10., 12.},
        {3., 6., 9., 12., 15., 18.},
        {4., 8., 12., 16., 20., 24.},
        {5., 10., 15., 20., 25., 30.},
        {6., 12., 18., 24., 30., 36.},
    }};

    // Mass matrix for uniform composite beam section
    std::array<std::array<double, 6>, 6> mass_matrix = {{
        {2., 0., 0., 0., 0.6, -0.4},
        {0., 2., 0., -0.6, 0., 0.2},
        {0., 0., 2., 0.4, -0.2, 0.},
        {0., -0.6, 0.4, 1., 2., 3.},
        {0.6, 0., -0.2, 2., 4., 6.},
        {-0.4, 0.2, 0., 3., 6., 9.},
    }};

    // Define beam initialization
    std::vector<BeamInput> beam_elem_inputs = {BeamInput(
        openturbine::gebt_poc::UserDefinedQuadrature(
            {-0.9491079123427585, -0.7415311855993943, -0.40584515137739696, 6.123233995736766e-17,
             0.4058451513773971, 0.7415311855993945, 0.9491079123427585},
            {0.1294849661688697, 0.27970539148927664, 0.3818300505051189, 0.4179591836734694,
             0.3818300505051189, 0.27970539148927664, 0.1294849661688697}
        ),
        {
            BeamNode(
                0.,
                {0, 0, 0, 0.9778215200524469, -0.01733607539094763, -0.09001900002195001,
                 -0.18831121859148398},  // x0
                {0, 0, 0, 1, 0, 0, 0},   // q
                {0, 0, 0, 0, 0, 0},      // v
                {0, 0, 0, 0, 0, 0}       // a
            ),
            BeamNode(
                0.1726731646460114,
                {0.863365823230057, -0.2558982639254171, 0.11304112106827427, 0.9950113028068008,
                 -0.002883848832932071, -0.030192109815745303, -0.09504013471947484},  // x0
                {0.002981602178886856, -0.00246675949494302, 0.003084570715675624,
                 0.9999627302042724, 0.008633550973807708, 0, 0},  // q
                {0.01726731646460114, -0.014285714285714285, 0.003084570715675624,
                 0.01726731646460114, -0.014285714285714285, 0.003084570715675624},  // v
                {0.01726731646460114, -0.011304112106827427, 0.00606617289456248,
                 0.01726731646460114, -0.014285714285714285, -0.014285714285714285}  // a
            ),
            BeamNode(
                0.5,
                {2.5, -0.25, 0, 0.9904718430204884, -0.009526411091536478, 0.09620741150793366,
                 0.09807604012323785},  // x0
                {0.025, -0.0125, 0.027500000000000004, 0.9996875162757026, 0.02499739591471221, 0,
                 0},                                                                       // q
                {0.05, -0.025, 0.027500000000000004, 0.05, -0.025, 0.027500000000000004},  // v
                {0.05, 0, 0.052500000000000005, 0.05, -0.025, -0.025}                      // a

            ),
            BeamNode(
                0.82732683535398865,
                {4.1366341767699435, 0.39875540678256005, -0.5416125496397031, 0.9472312341234699,
                 -0.04969214162931507, 0.18127630174800594, 0.25965858850765167},  // x0
                {0.06844696924968459, -0.011818954790771264, 0.07977257214146725, 0.9991445348823055,
                 0.04135454527402512, 0, 0},  // q
                {0.08273268353539887, -0.01428571428571428, 0.07977257214146725, 0.08273268353539887,
                 -0.01428571428571428, 0.07977257214146725},  // v
                {0.08273268353539887, 0.05416125496397031, 0.14821954139115184, 0.08273268353539887,
                 -0.01428571428571428, -0.01428571428571428}  // a

            ),
            BeamNode(
                1.,
                {5, 1, -1, 0.9210746582719719, -0.07193653093139739, 0.20507529985516368,
                 0.32309554437664584},                                          // x0
                {0.1, 0, 0.12, 0.9987502603949663, 0.04997916927067825, 0, 0},  // q
                {0.1, 0, 0.12, 0.1, 0, 0.12},                                   // v
                {0.1, 0.1, 0.22000000000000003, 0.1, 0, 0}                      // a
            ),
        },
        {
            BeamSection(0., mass_matrix, stiffness_matrix),
            BeamSection(1., mass_matrix, stiffness_matrix),
        }
    )};

    // Initialize beams from element inputs
    auto beams = InitializeBeams(beam_elem_inputs);

    //--------------------------------------------------------------------------
    // Check that node values are properly initialized from inputs
    //--------------------------------------------------------------------------

    // Node x0
    std::vector<std::vector<double>> exp_node_x0;
    for (const auto& node : beam_elem_inputs[0].nodes) {
        exp_node_x0.push_back(std::vector<double>(std::begin(node.x_), std::end(node.x_)));
    }
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(beams.node_x0, exp_node_x0);

    // Node u
    std::vector<std::vector<double>> exp_node_u;
    for (const auto& node : beam_elem_inputs[0].nodes) {
        exp_node_u.push_back(std::vector<double>(std::begin(node.q_), std::end(node.q_)));
    }
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(beams.node_u, exp_node_u);

    // Node u_dot
    std::vector<std::vector<double>> exp_node_u_dot;
    for (const auto& node : beam_elem_inputs[0].nodes) {
        exp_node_u_dot.push_back(std::vector<double>(std::begin(node.v_), std::end(node.v_)));
    }
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.node_u_dot, exp_node_u_dot
    );

    // Node u_ddot
    std::vector<std::vector<double>> exp_node_u_ddot;
    for (const auto& node : beam_elem_inputs[0].nodes) {
        exp_node_u_ddot.push_back(std::vector<double>(std::begin(node.a_), std::end(node.a_)));
    }
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.node_u_ddot, exp_node_u_ddot
    );

    //--------------------------------------------------------------------------
    // Check that shape function matrices and jacobian are correct
    //--------------------------------------------------------------------------

    // Shape function interpolation matrix
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.shape_interp,
        {{0.7643937937285443, 0.13706262395004942, -0.13172898316530468,
          0.000000000000000022962127484012874, 0.05567285555959517, -0.020342107108930366,
          -0.01995866709520774},
         {0.308266541035087, 0.95147326166415, 0.7339940232440426,
          -0.00000000000000008184220124322266, -0.1722057227387884, 0.05920536387827322,
          0.05659843178759581},
         {-0.1093000994560195, -0.12739914238354233, 0.5142678271004555, 0.9999999999999999,
          0.5142678271004553, -0.12739914238354247, -0.1093000994560195},
         {0.05659843178759582, 0.05920536387827313, -0.17220572273878845,
          0.0000000000000000818422012432227, 0.7339940232440427, 0.9514732616641498,
          0.308266541035087},
         {-0.01995866709520774, -0.020342107108930346, 0.055672855559595176,
          -0.000000000000000022962127484012877, -0.1317289831653047, 0.13706262395004964,
          0.7643937937285443}}
    );

    // Shape function derivative matrix
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.shape_deriv,
        {{-4.2701511577426, -1.9393626617606694, 0.013055310813328586, 0.375, -0.12778431702017545,
          -0.1974469591256584, 0.29092055406654616},
         {5.3820901606566505, 1.1702482430865344, -1.7874218089539982, -1.3365845776954526,
          0.4351480290853632, 0.5662571364020152, -0.8312402426318174},
         {-1.6522586914793211, 1.137924595950492, 2.0817302102058575,
          -0.0000000000000006661338147750939, -2.081730210205858, -1.1379245959504911,
          1.6522586914793211},
         {0.8312402426318174, -0.5662571364020155, -0.4351480290853627, 1.3365845776954537,
          1.7874218089539977, -1.1702482430865357, -5.38209016065665},
         {-0.2909205540665461, 0.1974469591256585, 0.12778431702017526, -0.3750000000000001,
          -0.013055310813328114, 1.9393626617606703, 4.2701511577426}}
    );

    // Jacobian array
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_1D_equal(
        beams.qp_jacobian,
        {2.7027484463552844, 2.585197218483525, 2.5041356900076877, 2.5980762113533173,
         2.8809584014451253, 3.2234919864103784, 3.4713669823269462}
    );

    //--------------------------------------------------------------------------
    // Check that quadrature point values are properly initialized from inputs
    //--------------------------------------------------------------------------

    // Quadrature point weights
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_1D_equal(
        beams.qp_weight, beam_elem_inputs[0].quadrature.GetQuadratureWeights()
    );

    //--------------------------------------------------------------------------
    // Check that quadrature point data is interpolated correctly
    //--------------------------------------------------------------------------

    // Interpolated mass matrix at quadrature point
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        Kokkos::subview(beams.qp_Mstar, 0, Kokkos::ALL, Kokkos::ALL),
        Array6x6ToVector(beam_elem_inputs[0].sections[0].M_star)
    );

    // Interpolated stiffness matrix at quadrature point
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        Kokkos::subview(beams.qp_Cstar, 0, Kokkos::ALL, Kokkos::ALL),
        Array6x6ToVector(beam_elem_inputs[0].sections[0].C_star)
    );

    // Quadrature point initial position
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_x0, {{0.12723021914310378, -0.04894958421765723, 0.024151041535564563},
                      {0.6461720360015141, -0.20836421838736455, 0.09583134319147545},
                      {1.4853871215565078, -0.32938986051629177, 0.12056743224042737},
                      {2.5, -0.24999999999999994, -3.061616997868384e-17},
                      {3.5146128784434927, 0.07645529086110522, -0.28527771913696975},
                      {4.353827963998485, 0.5331669672120298, -0.645699842407919},
                      {4.8727697808568955, 0.9001583281251011, -0.9249568708071938}}
    );

    // Quadrature point initial position derivative
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_x0_prime, {{0.924984344499876, -0.3417491071948319, 0.16616711516322952},
                            {0.9670442092872504, -0.23684722156643212, 0.09342853375847142},
                            {0.9983484561063567, -0.0434352369562536, -0.03759973910292136},
                            {0.9622504486493763, 0.19245008972987515, -0.1924500897298753},
                            {0.8677667816189111, 0.38486072083162454, -0.3144249326623439},
                            {0.7755564495086442, 0.5001708660037699, -0.38515100730308954},
                            {0.7201773862365269, 0.5541511105877541, -0.4174458994742709}}
    );

    // Quadrature point initial rotation
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_r0,
        {{0.980884413320975, -0.0144723270940525, -0.0824443301646419, -0.1756680160876},
         {0.991669584564107, -0.005383778767255235, -0.04674982717307109, -0.11990372653059925},
         {0.9995861588301111, -0.00017992787003652953, 0.01938431110866726, -0.02125387456601228},
         {0.9904718430204885, -0.00952641109153648, 0.09620741150793369, 0.09807604012323788},
         {0.9659269297215409, -0.03234979016749597, 0.15563090950471747, 0.2042490575781702},
         {0.9405335895294235, -0.05575622959800262, 0.18841261313027519, 0.2771073745704617},
         {0.9248004133377579, -0.06909685323377392, 0.20225483002403755, 0.3147424408869105}}
    );

    // Quadrature point translation displacement
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_u, {{6.475011465280995e-5, -6.310248039744534e-5, 6.5079641503883e-5},
                     {0.001670153200441368, -0.0014543119416486395, 0.0017133214521999145},
                     {0.00882549960354371, -0.006203642913062532, 0.009349870941639945},
                     {0.025, -0.0125, 0.027500000000000004},
                     {0.049410014741283426, -0.014678599914523912, 0.05635629770663533},
                     {0.07582327176038081, -0.00979897557794027, 0.08902813099686892},
                     {0.09497554134892866, -0.002416751787811821, 0.113487299261152}}
    );

    // Quadrature point translation displacement derivative
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_u_prime, {{0.0009414876868372848, -0.0009055519814222241, 0.0009486748279202956},
                           {0.0049990154049489330, -0.0040299482162833, 0.00519282884268206},
                           {0.0118634715162096380, -0.006576917174070561, 0.012920782384637453},
                           {0.0192450089729875180, -0.004811252243246878, 0.022131760318935656},
                           {0.0243989144493063000, 0.0013269072337655852, 0.029544078785920684},
                           {0.0270131148602409250, 0.008270021601725071, 0.03406974215263411},
                           {0.0280740688360788040, 0.012965473438963544, 0.03628197729108727}}
    );

    // Quadrature point rotation displacement
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_r, {{0.9999991906236807, 0.001272301844556629, 0.0, 0.0},
                     {0.9999791231576566, 0.006461675389885671, 0.0, 0.0},
                     {0.9998896832832036, 0.014853325008724992, 0.0, 0.0},
                     {0.9996875162757026, 0.024997395914712214, 0.0, 0.0},
                     {0.9993824383901835, 0.035138893512620800, 0.0, 0.0},
                     {0.9990523588113228, 0.043524525885204780, 0.0, 0.0},
                     {0.9988130406194091, 0.048708417020170240, 0.0, 0.0}}
    );

    // Quadrature point rotation displacement derivative
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_r_prime, {{-1.1768592508490864e-5, 0.009249835939573259, 0.0, 0.0},
                           {-6.24872579944091e-5, 0.009670240217676533, 0.0, 0.0},
                           {-0.00014828794095145858, 0.009982383220428504, 0.0, 0.0},
                           {-0.00024053755400424963, 0.009619497597035018, 0.0, 0.0},
                           {-0.0003049236454906731, 0.008672308825681862, 0.0, 0.0},
                           {-0.00033755726789449716, 0.007748215013234193, 0.0, 0.0},
                           {-0.00035078700412695185, 0.0071932256346726306, 0.0, 0.0}}
    );

    // Quadrature point translation velocity
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_u_dot, {{0.0025446043828620765, -0.0024798542682092665, 6.5079641503883e-5},
                         {0.0129234407200302820, -0.0112532875195889140, 0.0017133214521999145},
                         {0.0297077424311301600, -0.0208822428275864500, 0.009349870941639945},
                         {0.0500000000000000000, -0.0249999999999999980, 0.027500000000000004},
                         {0.0702922575688698500, -0.0208822428275864400, 0.05635629770663533},
                         {0.0870765592799697300, -0.0112532875195889040, 0.08902813099686892},
                         {0.0974553956171379200, -0.0024798542682092648, 0.113487299261152}}
    );

    // Quadrature point angular velocity
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_omega, {{0.0025446043828620765, -0.0024798542682092665, 6.5079641503883e-5},
                         {0.0129234407200302820, -0.011253287519588914, 0.0017133214521999145},
                         {0.0297077424311301600, -0.020882242827586450, 0.009349870941639945},
                         {0.0500000000000000000, -0.024999999999999998, 0.027500000000000004},
                         {0.0702922575688698500, -0.020882242827586440, 0.05635629770663533},
                         {0.0870765592799697300, -0.011253287519588904, 0.08902813099686892},
                         {0.0974553956171379200, -0.0024798542682092648, 0.113487299261152}}
    );

    // Quadrature point translation acceleration
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_u_ddot, {{0.0025446043828620765, -0.0024151041535564553, 0.0001298297561566934},
                          {0.012923440720030282, -0.009583134319147544, 0.003383474652641283},
                          {0.02970774243113016, -0.01205674322404274, 0.018175370545183655},
                          {0.05000000000000000, 3.0616169978683843e-18, 0.052500000000000005},
                          {0.07029225756886985, 0.028527771913696987, 0.10576631244791876},
                          {0.08707655927996973, 0.06456998424079191, 0.16485140275724972},
                          {0.09745539561713792, 0.0924956870807194, 0.2084628406100807}}
    );

    // Quadrature point angular acceleration
    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        beams.qp_omega_dot, {{0.0025446043828620765, -0.0024798542682092665, -0.0024798542682092665},
                             {0.012923440720030282, -0.011253287519588914, -0.011253287519588914},
                             {0.02970774243113016, -0.02088224282758645, -0.02088224282758645},
                             {0.05000000000000000, -0.024999999999999998, -0.024999999999999998},
                             {0.07029225756886985, -0.02088224282758644, -0.02088224282758644},
                             {0.08707655927996973, -0.011253287519588904, -0.011253287519588904},
                             {0.09745539561713792, -0.0024798542682092648, -0.0024798542682092648}}
    );
}

}  // namespace oturb::restruct_poc::tests

#pragma once

#include <array>
#include <vector>

namespace openturbine::tests {

//--------------------------------------------------------------------------
// FEA inputs/settings for curved beam
//--------------------------------------------------------------------------

/// Number of elements
constexpr size_t kNumElems{1};

/// Number of nodes
constexpr size_t kNumNodes{3};

/// Number of quadrature points
constexpr size_t kNumQPs{7};

/// Tolerance for floating point comparisons (unless otherwise stated)
constexpr double kDefaultTolerance{1e-12};

/// Second order polynomial GLL nodes
const std::vector<double> kGLLNodes{-1., 0., 1.};

/// Node positions for curved beam test (from Mathematica script)
constexpr std::array<std::array<double, 3>, 3> kCurvedBeamNodes = {{
    {0., 0., 0.},       // Node 1
    {2.5, -0.125, 0.},  // Node 2
    {5., 1., -1.}       // Node 3
}};

/// 7-point Gauss quadrature locations (high order quadrature rule)
constexpr std::array<double, 7> kGaussQuadraturePoints = {
    -0.9491079123427585,  // point 1
    -0.7415311855993945,  // point 2
    -0.4058451513773972,  // point 3
    0.,                   // point 4
    0.4058451513773972,   // point 5
    0.7415311855993945,   // point 6
    0.9491079123427585    // point 7
};

/// 7-point Gauss quadrature weights (high order quadrature rule)
constexpr std::array<double, 7> kGaussQuadratureWeights = {
    0.1294849661688697,  // weight 1
    0.2797053914892766,  // weight 2
    0.3818300505051189,  // weight 3
    0.4179591836734694,  // weight 4
    0.3818300505051189,  // weight 5
    0.2797053914892766,  // weight 6
    0.1294849661688697   // weight 7
};

//--------------------------------------------------------------------------
// Shape function and jacobian calculations: inputs and expected values
//--------------------------------------------------------------------------

/// Expected Lagrange polynomial interpolation weights at quadrature points (from Mathemtica script)
constexpr std::array<std::array<double, 3>, 7> kExpectedInterpWeights = {{
    {0.924956870807, 0.0991941707284, -0.0241510415356},  // QP 1
    {0.645699842408, 0.450131500784, -0.0958313431915},   // QP 2
    {0.285277719137, 0.835289713103, -0.12056743224},     // QP 3
    {0., 1., 0.},                                         // QP 4
    {-0.12056743224, 0.835289713103, 0.285277719137},     // QP 5
    {-0.0958313431915, 0.450131500784, 0.645699842408},   // QP 6
    {-0.0241510415356, 0.0991941707284, 0.924956870807}   // QP 7
}};

/// Expected Lagrange polynomial derivative weights at quadrature points (from Mathemtica script)
constexpr std::array<std::array<double, 3>, 7> kExpectedDerivWeights = {{
    {-1.449107912343, 1.898215824686, -0.4491079123428},    // QP 1
    {-1.241531185599, 1.483062371199, -0.2415311855994},    // QP 2
    {-0.9058451513774, 0.8116903027548, 0.0941548486226},   // QP 3
    {-0.5, 0.0, 0.5},                                       // QP 4
    {-0.0941548486226, -0.8116903027548, 0.9058451513774},  // QP 5
    {0.2415311855994, -1.483062371199, 1.241531185599},     // QP 6
    {0.4491079123428, -1.898215824686, 1.449107912343}      // QP 7
}};

/// Expected Jacobians at quadrature points for curved beam (from Mathemtica script)
constexpr std::array<double, 7> kExpectedJacobians = {
    2.631125640242,  // QP 1
    2.54766419719,   // QP 2
    2.501783068048,  // QP 3
    2.598076211353,  // QP 4
    2.843452426325,  // QP 5
    3.134881687854,  // QP 6
    3.34571483248    // QP 7
};

//--------------------------------------------------------------------------
// Forces calculations: inputs and expected values
//--------------------------------------------------------------------------

/// Material properties for curved beam (from Mathemtica script)
constexpr std::array<std::array<double, 6>, 6> kCurvedBeamCuu = {
    std::array<double, 6>{1.252405841673e6, -316160.8714634, 190249.1405163, 0., 0., 0.},
    std::array<double, 6>{-316160.8714634, 174443.0134269, -51312.45787663, 0., 0., 0.},
    std::array<double, 6>{190249.1405163, -51312.45787663, 68661.14489973, 0., 0., 0.},
    std::array<double, 6>{0., 0., 0., 31406.91734868, 25085.26404619, -17572.20634725},
    std::array<double, 6>{0., 0., 0., 25085.26404619, 47547.80267146, 6533.599954035},
    std::array<double, 6>{0., 0., 0., -17572.20634725, 6533.599954035, 138595.2799799}
};

/// Expected strain for curved beam (from Mathematica script)
constexpr std::array<double, 6> kCurvedBeamStrain = {
    0.002691499530001,  // ex
    -0.04310062503412,  // ey
    0.01251033519481,   // ez
    0.09666498438782,   // gxy
    0.09665741323766,   // gxz
    0.001532568414933   // gyz
};

/// Expected Fc i.e. elastic forces for curved beam (from Mathematica script)
constexpr std::array<double, 6> kExpectedFc = {
    19377.66142402,  // Fx
    -9011.48579619,  // Fy
    3582.628416357,  // Fz
    5433.695299839,  // Mx
    7030.727457672,  // My
    -854.6894329742  // Mz
};

/// Strain interpolation holder (einterphold from Mathematica)
constexpr std::array<double, 6> kStrainInterpolationHolder = {
    0.9549992533551,   // ex
    -0.3059615881351,  // ey
    0.167475028213,    // ez
    0.09666498438782,  // gxy
    0.09665741323766,  // gxz
    0.001532568414933  // gyz
};

/// Expected Fd i.e. damping forces for curved beam (from Mathematica script)
constexpr std::array<double, 6> kExpectedFd = {
    0.,               // Fx
    0.,               // Fy
    0.,               // Fz
    -413.0521579912,  // Mx
    176.1330689806,   // My
    2677.142143344    // Mz
};

//--------------------------------------------------------------------------
// Residual calculation: inputs and expected values
//--------------------------------------------------------------------------

constexpr std::array<double, 21> kInterpWeightsFlat = {
    0.924956870807,
    0.645699842408,
    0.285277719137,
    0.,
    -0.12056743224,
    -0.0958313431915,
    -0.0241510415356,
    0.0991941707284,
    0.450131500784,
    0.835289713103,
    1.,
    0.835289713103,
    0.450131500784,
    0.0991941707284,
    -0.0241510415356,
    -0.0958313431915,
    -0.12056743224,
    0.,
    0.285277719137,
    0.645699842408,
    0.924956870807
};

constexpr std::array<double, 21> kDerivWeightsFlat = {
    -1.449107912343,
    -1.241531185599,
    -0.9058451513774,
    -0.5,
    -0.0941548486226,
    0.2415311855994,
    0.4491079123428,
    1.898215824686,
    1.483062371199,
    0.8116903027548,
    0.,
    -0.8116903027548,
    -1.483062371199,
    -1.898215824686,
    -0.4491079123428,
    -0.2415311855994,
    0.0941548486226,
    0.5,
    0.9058451513774,
    1.241531185599,
    1.449107912343
};

constexpr std::array<double, kNumQPs * 6> kFc = {
    19377.66142402,  -9011.48579619,  3582.628416357,
    5433.695299839,  7030.727457672,  -854.6894329742,  // QP 1
    35490.84254734,  -8099.471990103, 3825.137533463,
    4593.228131633,  7488.269611072,  462.8805414784,  // QP 2
    41809.98986269,  -1118.980021592, 245.0189635062,
    3816.007424285,  7192.596693563,  3198.706243446,  // QP 3
    31320.89196032,  2121.925781777,  561.9839478968,
    4142.167385399,  5587.314015927,  6168.105064308,  // QP 4
    12445.64394842,  -11596.67035144, 8558.832424273,
    5381.871405552,  3716.839224054,  7767.833231818,  // QP 4
    -5219.017496402, -45587.00752485, 21423.97321937,
    6526.890109692,  2581.983143471,  8106.892961828,  // QP 4
    -13939.23015166, -81527.20084932, 31279.33745168,
    7133.754559318,  2143.593577595,  8032.504691472  // QP 4
};

constexpr std::array<double, kNumQPs * 6> kFd = {
    0., 0., 0., -413.0521579912, 176.1330689806,  2677.142143344,  // QP 1
    0., 0., 0., -175.2982322707, -336.0628883725, 914.8821391247,  // QP 2
    0., 0., 0., -27.38979513032, -976.3905881431, 214.6996893003,  // QP 3
    0., 0., 0., -271.4997840407, 3005.929623871,  3781.702029117,  // QP 4
    0., 0., 0., -1251.778505922, 10657.37400997,  16260.30700145,  // QP 5
    0., 0., 0., -198.0160029009, 18894.3224851,   40156.0515182,   // QP 6
    0., 0., 0., 3609.312381055,  24425.88953965,  65272.65615984   // QP 7
};

constexpr std::array<double, kNumQPs * 6> kFi = {
    0.02197622144767,  -0.03476996186535, 0.005820529971857,
    -0.04149911138042, -0.07557306419557, -0.1562386708521,  // QP 1
    0.1114870315503,   -0.152566078275,   0.05693583601535,
    -0.2030250329967,  -0.2770402248744,  -0.6107864532796,  // QP 2
    0.2628772156508,   -0.2574202455274,  0.2344640226209,
    -0.3972952233143,  -0.4088037485627,  -0.7317466112768,  // QP 3
    0.465768653659,    -0.2352745270237,  0.6117152142429,
    -0.4901303217258,  -0.4360315727221,  -0.009475285034617,  // QP 4
    0.6891847954765,   -0.04853357195211, 1.173756627334,
    -0.5474240295309,  -0.278155001394,   1.43370657115,  // QP 5
    0.8867303188692,   0.2236005514299,   1.78060490608,
    -0.776497831473,   0.03946854517767,  3.073630635099,  // QP 6
    1.017116465926,    0.4412924409434,   2.219355473579,
    -1.091189173302,   0.2678910453445,   4.286793316266  // QP 7
};

/// Expected residual forces (from Mathematica notebook)
constexpr std::array<double, 18> kExpectedResidualVector = {
    -38577.92446488, -2956.897670251, 755.6410891537, -4213.441305763, -11013.30888115,
    -6523.841494125, 34178.85505313,  36621.14643499, -16681.89312743, -3152.187800704,
    24867.91997485,  31292.87867203,  4401.879649647, -33664.53616728, 15930.979968,
    6807.108584957,  27016.10156256,  62253.53739314
};

//--------------------------------------------------------------------------
// Linearization matrices calculations: inputs and expected values
//--------------------------------------------------------------------------

constexpr std::array<std::array<double, 3>, 3> kCurvedBeamM_tilde = {
    std::array<double, 3>{0, 854.6894329742, 7030.727457672},
    std::array<double, 3>{-854.6894329742, 0, -5433.695299839},
    std::array<double, 3>{-7030.727457672, 5433.695299839, 0}
};

constexpr std::array<std::array<double, 3>, 3> kCurvedBeamN_tilde = {
    std::array<double, 3>{0, -3582.628416357, -9011.48579619},
    std::array<double, 3>{3582.628416357, 0, -19377.66142402},
    std::array<double, 3>{9011.48579619, 19377.66142402, 0}
};

constexpr std::array<std::array<double, 6>, 6> kExpectedOuu = {
    std::array<double, 6>{0., 0., 0., 5259.878305537, -24476.28810745, -72243.1983242},
    std::array<double, 6>{0., 0., 0., 9932.579075823, 3945.69190817, -50482.20381259},
    std::array<double, 6>{0., 0., 0., 3402.631809939, 14331.70051426, -9205.570213707},
    std::array<double, 6>{0., 0., 0., 0., -854.6894329742, -7030.727457672},
    std::array<double, 6>{0., 0., 0., 854.6894329742, 0., 5433.695299839},
    std::array<double, 6>{0., 0., 0., 7030.727457672, -5433.695299839, 0.}
};

constexpr std::array<std::array<double, 6>, 6> kExpectedPuu = {
    std::array<double, 6>{0., 0., 0., 0., 0., 0.},
    std::array<double, 6>{0., 0., 0., 0., 0., 0.},
    std::array<double, 6>{0., 0., 0., 0., 0., 0.},
    std::array<double, 6>{5259.878305537, 9932.579075823, 3402.631809939, 0., 0., 0.},
    std::array<double, 6>{-24476.28810745, 3945.69190817, 14331.70051426, 0., 0., 0.},
    std::array<double, 6>{-72243.1983242, -50482.20381259, -9205.570213707, 0., 0., 0.}
};

constexpr std::array<std::array<double, 6>, 6> kExpectedQuu = {
    std::array<double, 6>{0., 0., 0., 0., 0., 0.},
    std::array<double, 6>{0., 0., 0., 0., 0., 0.},
    std::array<double, 6>{0., 0., 0., 0., 0., 0.},
    std::array<double, 6>{0., 0., 0., 2704.533593359, 5045.754713661, -11271.05939004},
    std::array<double, 6>{0., 0., 0., 2368.612570317, 17785.93033178, 3307.618996744},
    std::array<double, 6>{0., 0., 0., -11094.92632106, 3720.671154735, 70314.11063997}
};

//--------------------------------------------------------------------------
// Stiffness matrix calculation: inputs and expected values
//--------------------------------------------------------------------------

}  // namespace openturbine::tests

#include <gtest/gtest.h>

#include "src/gebt_poc/ElementalConstraintForcesGradientMatrix.hpp"
#include "tests/unit_tests/gebt_poc/test_data.h"
#include "tests/unit_tests/gen_alpha_poc/test_utilities.h"

namespace openturbine::gebt_poc {

TEST(SolverTest, ElementalConstraintForcesGradientMatrix) {
    auto position_vectors = gen_alpha_solver::create_vector(
        {// node 1
         0., 0., 0., 0.9778215200524469, -0.01733607539094763, -0.09001900002195001,
         -0.18831121859148398,
         // node 2
         0.8633658232300573, -0.25589826392541715, 0.1130411210682743, 0.9950113028068008,
         -0.002883848832932071, -0.030192109815745303, -0.09504013471947484,
         // node 3
         2.5, -0.25, 0., 0.9904718430204884, -0.009526411091536478, 0.09620741150793366,
         0.09807604012323785,
         // node 4
         4.136634176769943, 0.39875540678255983, -0.5416125496397027, 0.9472312341234699,
         -0.049692141629315074, 0.18127630174800594, 0.25965858850765167,
         // node 5
         5., 1., -1., 0.9210746582719719, -0.07193653093139739, 0.20507529985516368,
         0.3230955443766458}
    );

    auto generalized_coords = gen_alpha_solver::create_vector(
        {// node 1
         0.1, 0., 0.12, 0.9987502603949662, 0.049979169270678324, 0., 0.,
         // node 2
         0.13751623510808916, 0.023745363506318708, 0.16976855483097075, 0.9982815394712516,
         0.05860006784047278, 0., 0.,
         // node 3
         0.225, 0.1125, 0.2925, 0.9971888181122074, 0.07492970727274234, 0., 0.,
         // node 4
         0.3339123363204823, 0.27625463649368126, 0.45594573088331497, 0.9958289985675476,
         0.09123927669570399, 0., 0.,
         // node 5
         0.4, 0.4, 0.5599999999999999, 0.9950041652780258, 0.09983341664682815, 0., 0.}
    );

    auto constraint_gradients = Kokkos::View<double[6][30]>("constraint_gradients");

    ElementalConstraintForcesGradientMatrix(
        generalized_coords, position_vectors, constraint_gradients
    );

    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        constraint_gradients,
        {
            {1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 1
            {0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 2
            {0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 3
            {-1., 0., 0., 0., 0.12, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0.,  0., 0., 0., 0.,   0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 4
            {0., -0.995004, 0.0998334, -0.1194, 0.00998334, 0.0995004, 0., 0., 0., 0.,
             0., 0.,        0.,        0.,      0.,         0.,        0., 0., 0., 0.,
             0., 0.,        0.,        0.,      0.,         0.,        0., 0., 0., 0.},  // row 5
            {0., -0.0998334, -0.995004, -0.01198, -0.0995004, 0.00998334, 0., 0., 0., 0.,
             0., 0.,         0.,        0.,       0.,         0.,         0., 0., 0., 0.,
             0., 0.,         0.,        0.,       0.,         0.,         0., 0., 0., 0.}  // row 6
        }
    );
}

// Tests for ConstraintGradientMatrixForRotatingBeam
TEST(SolverTest, ConstraintGradientMatrixForRotatingBeam) {
    auto gen_coords = gen_alpha_solver::create_matrix({
        {0., 0., 0., 1., 0., 0., 0.},  // node 1
        {0., 0., 0., 1., 0., 0., 0.},  // node 2
        {0., 0., 0., 1., 0., 0., 0.},  // node 3
        {0., 0., 0., 1., 0., 0., 0.},  // node 4
        {0., 0., 0., 1., 0., 0., 0.}   // node 5
    });
    auto applied_motion = gen_alpha_solver::create_vector({0., 0., 0., 0.999997, 0., 0., 0.0025});

    auto constraints_gradient_matrix = Kokkos::View<double[6][30]>("constraints_gradient_matrix");
    ConstraintGradientMatrixForRotatingBeam(gen_coords, applied_motion, constraints_gradient_matrix);

    openturbine::gen_alpha_solver::tests::expect_kokkos_view_2D_equal(
        constraints_gradient_matrix,
        {
            {1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 1
            {0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 2
            {0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.},  // row 3
            {0.,
             0.,
             0.,
             0.9999937500130208,
             -0.002499989583346354,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.},  // row 4
            {0.,
             0.,
             0.,
             0.002499989583346354,
             0.9999937500130208,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.,
             0.},  // row 5
            {0., 0., 0., 0., 0., 0.9999875000260416,
             0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0.}  // row 6
        }
    );
}

}  // namespace openturbine::gebt_poc

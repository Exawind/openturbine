VTK Visualization
=================

This guide will walk you through on how to generate VTK visualization files from OpenTurbine simulation
outputs using the ``generate_vtk_output.py`` script. VTK (Visualization Toolkit) files can be opened
in visualization software such as `ParaView <https://www.paraview.org/>`_,
`VisIt <https://visit-dav.github.io/visit-website/>`_, or other VTK-compatible viewers to create plots,
movies, and interactive visualizations of your simulation results. We tested the visualization workflow
described below with ParaView version 5.11.2 on macOS.

.. tip::
   For the most up to date and working
   version of this script, see ``src/viz/generate_vtk_output.py``.

   You can get help on how to use the script by running:

   .. code-block:: bash

      python src/viz/generate_vtk_output.py -h

   This will display the following usage information:

   .. code-block:: text

      usage: generate_vtk_output.py [-h] [--output_dir OUTPUT_DIR] [--start-timestep START_TIMESTEP] [--end-timestep END_TIMESTEP]
                                    netcdf_file connectivity_file

      Generate VTK files from OpenTurbine NetCDF output

      positional arguments:
        netcdf_file           Path to OpenTurbine NetCDF output file e.g. blade_interface.nc
        connectivity_file     Path to mesh connectivity YAML file e.g. mesh_connectivity.yaml

      options:
        -h, --help            show this help message and exit
        --output_dir, -o OUTPUT_DIR
                              Directory for writing the vtk output files
        --start-timestep, -s START_TIMESTEP
                              Starting timestep to visualize (default: 0)
        --end-timestep, -e END_TIMESTEP
                              Ending timestep to visualize (default: last timestep)

Overview
--------

The ``generate_vtk_output.py`` script is a post-processing tool that converts OpenTurbine simulation
outputs into VTK (Visualization Toolkit) format for visualization and analysis. It performs the
following process to generate the VTK files:

1. **Data Conversion**: Reads time-series simulation data from NetCDF files and mesh connectivity
   information from YAML files, then converts this data into VTK's unstructured grid format
   (``vtkUnstructuredGrid``). An unstructured grid is a flexible data structure that stores a
   collection of points and heterogeneous cells (each with a VTK cell type and point connectivity)
   without requiring a regular lattice structure, making it well-suited for a flexible multibody system
   where elements may have varying connectivity patterns and types.

2. **Element Visualization**: Creates appropriate VTK representations for different OpenTurbine elements:

   - **Beam elements**: Represented as polyline cells connecting multiple nodes
   - **Mass elements**: Represented as vertex cells at single nodes
   - **Spring elements**: Represented as line cells connecting two nodes
   - **Constraint elements**: Represented as line cells connecting constrained nodes

3. **Data Fields**: Extracts and includes comprehensive node data in the VTK output:

   - **Position and orientation**: Node positions and 3x3 rotation matrices derived from quaternions
   - **Kinematics**: Translational and rotational velocities and accelerations
   - **Forces and moments**: Applied loads (when available in simulation output)
   - **Deformation**: Structural deformation data (when available)
   - **Element metadata**: Element IDs, types, and node connectivity information

4. **Time Series Support**: Generates individual VTK files for each simulation timestep and creates
   a ParaView Data (PVD) collection file that groups all timesteps together, enabling time-based
   animation and analysis in ParaView.

Prerequisites
-------------

Before using the VTK visualization script, you'll need the following Python packages installed in your environment:

- ``numpy``: For numerical operations
- ``netCDF4``: For reading OpenTurbine NetCDF output files
- ``vtk``: For creating VTK visualization files
- ``PyYAML``: For reading yaml-based mesh connectivity files

You can install these dependencies using pip:

.. code-block:: bash

    pip install numpy netcdf4 vtk pyyaml

Or if you're using conda:

.. code-block:: bash

    conda install numpy netcdf4 vtk pyyaml

Required Input Files
--------------------

The VTK visualization script requires two input files, which are generated automatically when running a
simulation via OpenTurbine APIs found in ``src/interfaces``:

1. **NetCDF Output File**: This is the primary output file generated by OpenTurbine during simulation.
   It contains the time-series data for all nodes including position, velocity, acceleration, forces,
   and moments. This file is generated automatically when running a simulation via the high-level
   OpenTurbine APIs provided in ``src/interfaces``. The file naming follows the pattern:

   - ``TurbineInterface`` API generates ``turbine_interface.nc``
   - ``CFDInterface`` API generates ``cfd_interface.nc``
   - ``BladeInterface`` API generates ``blade_interface.nc`` etc.

2. **Mesh Connectivity File**: This is a YAML file that describes the connectivity between nodes for
   different element types (beams, masses, springs, constraints). This file is generated during the
   simulation setup process and is named ``mesh_connectivity.yaml`` by default.

.. note::
   To generate these files during simulation, make sure to set the appropriate output
   configuration. For example, in test cases, verify that ``write_output`` is set to
   ``true`` to enable file output. The output file name can be specified using
   ``builder.Solution().SetOutputFile("filename")``.

Basic Usage
-----------

The simplest way to generate VTK files is to run the script with the required input files:

.. code-block:: bash

    python src/viz/generate_vtk_output.py simulation_output.nc mesh_connectivity.yaml

This will create VTK files for all timesteps in the output directory ``vtk_output/`` in the current working directory.

Command Line Options
~~~~~~~~~~~~~~~~~~~~

The script supports several command line options to customize the visualization output:

.. code-block:: bash

    python src/viz/generate_vtk_output.py netcdf_file connectivity_file [OPTIONS]

**Required Arguments:**

- ``netcdf_file``: Path to OpenTurbine NetCDF output file (e.g., ``turbine_interface.nc``)
- ``connectivity_file``: Path to mesh connectivity YAML file (e.g., ``mesh_connectivity.yaml``)

**Optional Arguments:**

- ``--output_dir``, ``-o``: Directory for writing VTK output files (default: ``vtk_output``)
- ``--start-timestep``, ``-s``: Starting timestep to visualize (default: 0)
- ``--end-timestep``, ``-e``: Ending timestep to visualize (default: last timestep)

Example Usage
~~~~~~~~~~~~~

Generate VTK files for all timesteps for the IEA 15 MW reference turbine test case:

.. code-block:: bash

    python src/viz/generate_vtk_output.py \
        tests/regression_tests/TurbineInterfaceTest.IEA15/turbine_interface.nc \
        tests/regression_tests/TurbineInterfaceTest.IEA15/mesh_connectivity.yaml

Generate VTK files for a specific time range:

.. code-block:: bash

    python src/viz/generate_vtk_output.py \
        tests/regression_tests/TurbineInterfaceTest.IEA15/turbine_interface.nc \
        tests/regression_tests/TurbineInterfaceTest.IEA15/mesh_connectivity.yaml \
        --output_dir my_visualization \
        --start-timestep 0 \
        --end-timestep 50

Output Files
------------

File Locations
~~~~~~~~~~~~~~

- For interface tests run from the ``tests/regression_tests/interfaces/`` directory, the output files will be written in the ``build/tests/regression_tests/<TestName>/`` directory
- In custom simulations: Current working directory or you can specify an output path via the ``--output_dir`` option

Data Arrays Included
~~~~~~~~~~~~~~~~~~~~~

Point Data (per node)
^^^^^^^^^^^^^^^^^^^^^^

- Node identification numbers (NodeID)
- Orientation data (3x3 rotation matrix components)

  - OrientationX
  - OrientationY
  - OrientationZ
- Translational and rotational velocities
- Translational and rotational accelerations

Cell Data (per element)
^^^^^^^^^^^^^^^^^^^^^^^^^

- Element type information for filtering (numeric IDs (ElementType) and string names (ElementTypeName))
- Element identification numbers (ElementID)

Visualization in ParaView
-------------------------

- **Opening the Collection File:**

  - Launch ParaView
  - Open the ``simulation.pvd`` file from your output directory
  - This will load all timesteps as a time series

- **Basic Controls for Animation and Visualization:**

  - Use the animation controls to play through timesteps
  - Set the animation speed and range as desired
  - Export animations as movies using File → Save Animation
  - Select different data arrays from the "Coloring" dropdown menus

.. tip::
   For detailed ParaView usage instructions, refer to the `ParaView User's Guide <https://www.paraview.org/documentation/>`_
   and `ParaView Tutorials <https://www.paraview.org/tutorials/>`_.

Examples
--------

This section showcases some examples of the types of visualizations and animations that can be
generated by the VTK script by leveraging the OpenTurbine interfaces/APIs via the regression
tests.

Turbine Structure Visualization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following animation shows the turbine structure during dynamic simulation from the
``TurbineInterfaceTest.IEA15_Structure`` regression test. This test builds the
`IEA‑15‑240‑RWT <https://github.com/IEAWindSystems/IEA-15-240-RWT>`_ turbine structure
from a WindIO YAML file and applies:

- A tower load of 100 kN at the tower‑top node
- Generator torque of 100 MNm applied to the turbine shaft
- Time‑varying blade‑3 pitch (0.5 rad/s rate)
- Time‑varying yaw angle (0.3 rad/s rate)
- Torque control that is turned off after 500 time steps (t = 5 s)

.. note::
   The above loads and control inputs are fictitious and chosen just to demonstrate the turbine's
   response under different conditions for testing purposes; they are not representative of a specific
   operating scenario.

The animation demonstrates blade deformation, tower motion, nacelle yaw rotation, blade pitch
changes, and overall structural response during the 3 s simulation with 0.01 s time steps.

.. image:: /_static/turbine_animation.gif
   :alt: Wind turbine structure animation from IEA-15-240-RWT test
   :width: 80%
   :align: center

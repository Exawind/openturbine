# name: OpenTurbine-CI

# on: push

# env:
#   CMAKE_BUILD_PARALLEL_LEVEL: 4
#   CTEST_PARALLEL_LEVEL: 2

# jobs:
#   Correctness:
#     runs-on: ${{matrix.os}}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macos-latest]
#         compiler: [gcc, llvm]
#         build_type: [Release, Debug]
#         exclude: 
#           - os: macos-latest
#             compiler: gcc
#         include:
#            - os: ubuntu-latest
#              install_deps: sudo apt-get install gfortran-13 libblas-dev liblapack-dev liblapacke-dev
#            - os: macos-latest
#              install_deps: brew install gfortran gcc openblas lapack
#     steps:
#     - name: Setup Cpp
#       if: matrix.os == 'ubuntu-latest'
#       uses: aminya/setup-cpp@v1
#       with:
#         compiler: ${{ matrix.compiler }}
#         cmake: true
#         ninja: true
#         clangtidy: ${{matrix.os != 'macos-latest' }}
#         cppcheck: ${{matrix.os != 'macos-latest' }}
#         ccache: ${{matrix.os != 'macos-latest' }}
#     - name: Install dependencies
#       run: |
#         ${{matrix.install_deps}}
#     - name: Cache install Trilinos
#       id: cache-trilinos
#       uses: actions/cache@v3
#       with:
#         path: ${{ github.workspace }}/spack
#         key: ${{runner.os}}-spack
#     - name: Install Trilinos
#       if: steps.cache-trilinos.outputs.cache-hit != 'true'
#       run: |
#         if [ ${{matrix.os}} = 'ubuntu-latest' ]; then
#           export FC=gfortran
#         fi
#         git clone https://github.com/spack/spack.git
#         source spack/share/spack/setup-env.sh
#         spack compiler find
#         spack external find
#         spack install googletest
#         spack install trilinos@master~mpi~epetra+basker
#     - name: Clone
#       uses: actions/checkout@v4
#       with:
#         submodules: true
#         path: openturbine
#     - name: Test OpenTurbine
#       run: |
#         source spack/share/spack/setup-env.sh
#         spack load trilinos
#         spack load googletest
#         cd openturbine
#         mkdir build
#         cd build
#         cmake .. \
#           -DOTURB_ENABLE_TESTS:BOOL=ON \
#           -DOTURB_ENABLE_BASIC_SANITIZERS=ON \
#           -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
#         cmake --build .
#         ctest -C ${{ matrix.build_type }} --output-on-failure
#     - name: Run CppCheck
#       if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'llvm'
#       run: |
#         source spack/share/spack/setup-env.sh
#         spack load trilinos
#         spack load googletest
#         cd openturbine
#         mkdir build-cppcheck
#         cd build-cppcheck
#         cmake .. \
#           -DOTURB_ENABLE_TESTS:BOOL=ON \
#           -DOTURB_ENABLE_BASIC_SANITIZERS=ON \
#           -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
#           -DCMAKE_CXX_CPPCHECK="cppcheck;--enable=all;--error-exitcode=0;--suppress=missingInclude;--library=googletest"
#         cmake --build . -j 1
#     - name: Run Clang-Tidy
#       if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'llvm'
#       run: |
#         source spack/share/spack/setup-env.sh
#         spack load trilinos
#         spack load googletest
#         cd openturbine
#         mkdir build-clangtidy
#         cd build-clangtidy
#         cmake .. \
#           -DOTURB_ENABLE_TESTS:BOOL=ON \
#           -DOTURB_ENABLE_BASIC_SANITIZERS=ON \
#           -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
#           -DCMAKE_CXX_CLANG_TIDY="clang-tidy"
#         cmake --build . -j 1
#   Formatting:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Clone
#       uses: actions/checkout@v4
#     - name: Check formatting
#       uses: DoozyX/clang-format-lint-action@v0.16.2
#       with:
#         source: './src ./tests/unit_tests'
#         exclude: '.'
#         extensions: 'H,h,cpp'
#         clangFormatVersion: 16
